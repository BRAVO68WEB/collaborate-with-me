package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"fmt"

	"github.com/BRAVO68WEB/collaborate-with-me/packages/api/graph/model"
)

// CreateWorkspace is the resolver for the createWorkspace field.
func (r *mutationResolver) CreateWorkspace(ctx context.Context, input model.NewWorkspace) (*model.Workspace, error) {
	panic(fmt.Errorf("not implemented: CreateWorkspace - createWorkspace"))
}

// UpdateWorkspace is the resolver for the updateWorkspace field.
func (r *mutationResolver) UpdateWorkspace(ctx context.Context, id string, input model.NewWorkspace) (*model.Workspace, error) {
	panic(fmt.Errorf("not implemented: UpdateWorkspace - updateWorkspace"))
}

// DeleteWorkspace is the resolver for the deleteWorkspace field.
func (r *mutationResolver) DeleteWorkspace(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteWorkspace - deleteWorkspace"))
}

// AddUserToWorkspace is the resolver for the addUserToWorkspace field.
func (r *mutationResolver) AddUserToWorkspace(ctx context.Context, workspaceID string, userID string) (*model.Workspace, error) {
	panic(fmt.Errorf("not implemented: AddUserToWorkspace - addUserToWorkspace"))
}

// RemoveUserFromWorkspace is the resolver for the removeUserFromWorkspace field.
func (r *mutationResolver) RemoveUserFromWorkspace(ctx context.Context, workspaceID string, userID string) (*model.Workspace, error) {
	panic(fmt.Errorf("not implemented: RemoveUserFromWorkspace - removeUserFromWorkspace"))
}

// AddExcalidrawObject is the resolver for the addExcalidrawObject field.
func (r *mutationResolver) AddExcalidrawObject(ctx context.Context, workspaceID string, object string) (*model.Workspace, error) {
	panic(fmt.Errorf("not implemented: AddExcalidrawObject - addExcalidrawObject"))
}

// RemoveExcalidrawObject is the resolver for the removeExcalidrawObject field.
func (r *mutationResolver) RemoveExcalidrawObject(ctx context.Context, workspaceID string, objectID string) (*model.Workspace, error) {
	panic(fmt.Errorf("not implemented: RemoveExcalidrawObject - removeExcalidrawObject"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Workspaces is the resolver for the workspaces field.
func (r *queryResolver) Workspaces(ctx context.Context, userID *string) ([]*model.Workspace, error) {
	panic(fmt.Errorf("not implemented: Workspaces - workspaces"))
}

// Workspace is the resolver for the workspace field.
func (r *queryResolver) Workspace(ctx context.Context, id string, userID string) (*model.Workspace, error) {
	panic(fmt.Errorf("not implemented: Workspace - workspace"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// LiveWorkspaceUpdates is the resolver for the liveWorkspaceUpdates field.
func (r *subscriptionResolver) LiveWorkspaceUpdates(ctx context.Context, workspaceID string) (<-chan string, error) {
	panic(fmt.Errorf("not implemented: LiveWorkspaceUpdates - liveWorkspaceUpdates"))
}

// LiveUserUpdates is the resolver for the liveUserUpdates field.
func (r *subscriptionResolver) LiveUserUpdates(ctx context.Context, userID string) (<-chan *model.User, error) {
	panic(fmt.Errorf("not implemented: LiveUserUpdates - liveUserUpdates"))
}

// LiveWorkspaceCollaborators is the resolver for the liveWorkspaceCollaborators field.
func (r *subscriptionResolver) LiveWorkspaceCollaborators(ctx context.Context, workspaceID string) (<-chan []*model.User, error) {
	panic(fmt.Errorf("not implemented: LiveWorkspaceCollaborators - liveWorkspaceCollaborators"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
